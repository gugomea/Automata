<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="1507"><g><title>[unknown] (1 samples, 0.07%)</title><rect x="0.0000%" y="565" width="0.0664%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>_int_malloc (1 samples, 0.07%)</title><rect x="0.0000%" y="549" width="0.0664%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>error_entry (1 samples, 0.07%)</title><rect x="0.0000%" y="533" width="0.0664%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>__GI___libc_free (1 samples, 0.07%)</title><rect x="0.0664%" y="309" width="0.0664%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3164%" y="319.50"></text></g><g><title>_int_free (21 samples, 1.39%)</title><rect x="8.5601%" y="245" width="1.3935%" height="15" fill="rgb(208,68,35)" fg:x="129" fg:w="21"/><text x="8.8101%" y="255.50"></text></g><g><title>__GI___libc_free (28 samples, 1.86%)</title><rect x="8.1619%" y="261" width="1.8580%" height="15" fill="rgb(232,128,0)" fg:x="123" fg:w="28"/><text x="8.4119%" y="271.50">_..</text></g><g><title>arena_for_chunk (1 samples, 0.07%)</title><rect x="9.9536%" y="245" width="0.0664%" height="15" fill="rgb(207,160,47)" fg:x="150" fg:w="1"/><text x="10.2036%" y="255.50"></text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="10.0199%" y="261" width="0.0664%" height="15" fill="rgb(228,23,34)" fg:x="151" fg:w="1"/><text x="10.2699%" y="271.50"></text></g><g><title>__GI___libc_free (74 samples, 4.91%)</title><rect x="23.4240%" y="245" width="4.9104%" height="15" fill="rgb(218,30,26)" fg:x="353" fg:w="74"/><text x="23.6740%" y="255.50">__GI__..</text></g><g><title>_int_free (53 samples, 3.52%)</title><rect x="24.8175%" y="229" width="3.5169%" height="15" fill="rgb(220,122,19)" fg:x="374" fg:w="53"/><text x="25.0675%" y="239.50">_in..</text></g><g><title>tcache_put (2 samples, 0.13%)</title><rect x="28.2017%" y="213" width="0.1327%" height="15" fill="rgb(250,228,42)" fg:x="425" fg:w="2"/><text x="28.4517%" y="223.50"></text></g><g><title>__GI___libc_malloc (18 samples, 1.19%)</title><rect x="28.3344%" y="245" width="1.1944%" height="15" fill="rgb(240,193,28)" fg:x="427" fg:w="18"/><text x="28.5844%" y="255.50"></text></g><g><title>tcache_get (5 samples, 0.33%)</title><rect x="29.1971%" y="229" width="0.3318%" height="15" fill="rgb(216,20,37)" fg:x="440" fg:w="5"/><text x="29.4471%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="29.5289%" y="245" width="0.0664%" height="15" fill="rgb(206,188,39)" fg:x="445" fg:w="1"/><text x="29.7789%" y="255.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.27%)</title><rect x="29.5952%" y="245" width="0.2654%" height="15" fill="rgb(217,207,13)" fg:x="446" fg:w="4"/><text x="29.8452%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.27%)</title><rect x="29.5952%" y="229" width="0.2654%" height="15" fill="rgb(231,73,38)" fg:x="446" fg:w="4"/><text x="29.8452%" y="239.50"></text></g><g><title>__rust_dealloc (7 samples, 0.46%)</title><rect x="29.8607%" y="245" width="0.4645%" height="15" fill="rgb(225,20,46)" fg:x="450" fg:w="7"/><text x="30.1107%" y="255.50"></text></g><g><title>__GI___libc_malloc (34 samples, 2.26%)</title><rect x="36.9608%" y="213" width="2.2561%" height="15" fill="rgb(210,31,41)" fg:x="557" fg:w="34"/><text x="37.2108%" y="223.50">_..</text></g><g><title>tcache_get (9 samples, 0.60%)</title><rect x="38.6198%" y="197" width="0.5972%" height="15" fill="rgb(221,200,47)" fg:x="582" fg:w="9"/><text x="38.8698%" y="207.50"></text></g><g><title>@plt (2 samples, 0.13%)</title><rect x="45.1228%" y="181" width="0.1327%" height="15" fill="rgb(226,26,5)" fg:x="680" fg:w="2"/><text x="45.3728%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned (14 samples, 0.93%)</title><rect x="45.2555%" y="181" width="0.9290%" height="15" fill="rgb(249,33,26)" fg:x="682" fg:w="14"/><text x="45.5055%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (13 samples, 0.86%)</title><rect x="46.1845%" y="181" width="0.8626%" height="15" fill="rgb(235,183,28)" fg:x="696" fg:w="13"/><text x="46.4345%" y="191.50"></text></g><g><title>_int_free (48 samples, 3.19%)</title><rect x="47.0471%" y="181" width="3.1851%" height="15" fill="rgb(221,5,38)" fg:x="709" fg:w="48"/><text x="47.2971%" y="191.50">_in..</text></g><g><title>tcache_put (5 samples, 0.33%)</title><rect x="49.9005%" y="165" width="0.3318%" height="15" fill="rgb(247,18,42)" fg:x="752" fg:w="5"/><text x="50.1505%" y="175.50"></text></g><g><title>checked_request2size (4 samples, 0.27%)</title><rect x="55.0100%" y="165" width="0.2654%" height="15" fill="rgb(241,131,45)" fg:x="829" fg:w="4"/><text x="55.2600%" y="175.50"></text></g><g><title>tcache_put (14 samples, 0.93%)</title><rect x="55.2754%" y="165" width="0.9290%" height="15" fill="rgb(249,31,29)" fg:x="833" fg:w="14"/><text x="55.5254%" y="175.50"></text></g><g><title>_int_realloc (239 samples, 15.86%)</title><rect x="41.7386%" y="197" width="15.8593%" height="15" fill="rgb(225,111,53)" fg:x="629" fg:w="239"/><text x="41.9886%" y="207.50">_int_realloc</text></g><g><title>_int_malloc (111 samples, 7.37%)</title><rect x="50.2322%" y="181" width="7.3656%" height="15" fill="rgb(238,160,17)" fg:x="757" fg:w="111"/><text x="50.4822%" y="191.50">_int_malloc</text></g><g><title>unlink_chunk (21 samples, 1.39%)</title><rect x="56.2044%" y="165" width="1.3935%" height="15" fill="rgb(214,148,48)" fg:x="847" fg:w="21"/><text x="56.4544%" y="175.50"></text></g><g><title>arena_for_chunk (1 samples, 0.07%)</title><rect x="57.5979%" y="197" width="0.0664%" height="15" fill="rgb(232,36,49)" fg:x="868" fg:w="1"/><text x="57.8479%" y="207.50"></text></g><g><title>__GI___libc_realloc (279 samples, 18.51%)</title><rect x="39.2170%" y="213" width="18.5136%" height="15" fill="rgb(209,103,24)" fg:x="591" fg:w="279"/><text x="39.4670%" y="223.50">__GI___libc_realloc</text></g><g><title>checked_request2size (1 samples, 0.07%)</title><rect x="57.6642%" y="197" width="0.0664%" height="15" fill="rgb(229,88,8)" fg:x="869" fg:w="1"/><text x="57.9142%" y="207.50"></text></g><g><title>__rdl_alloc (18 samples, 1.19%)</title><rect x="57.7306%" y="213" width="1.1944%" height="15" fill="rgb(213,181,19)" fg:x="870" fg:w="18"/><text x="57.9806%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15 samples, 1.00%)</title><rect x="57.9297%" y="197" width="0.9954%" height="15" fill="rgb(254,191,54)" fg:x="873" fg:w="15"/><text x="58.1797%" y="207.50"></text></g><g><title>__rdl_realloc (26 samples, 1.73%)</title><rect x="58.9250%" y="213" width="1.7253%" height="15" fill="rgb(241,83,37)" fg:x="888" fg:w="26"/><text x="59.1750%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (22 samples, 1.46%)</title><rect x="59.1904%" y="197" width="1.4599%" height="15" fill="rgb(233,36,39)" fg:x="892" fg:w="22"/><text x="59.4404%" y="207.50"></text></g><g><title>__rust_alloc (9 samples, 0.60%)</title><rect x="60.6503%" y="213" width="0.5972%" height="15" fill="rgb(226,3,54)" fg:x="914" fg:w="9"/><text x="60.9003%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (881 samples, 58.46%)</title><rect x="3.3179%" y="277" width="58.4605%" height="15" fill="rgb(245,192,40)" fg:x="50" fg:w="881"/><text x="3.5679%" y="287.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>automata::Backend::transformer::empty_transitions (779 samples, 51.69%)</title><rect x="10.0863%" y="261" width="51.6921%" height="15" fill="rgb(238,167,29)" fg:x="152" fg:w="779"/><text x="10.3363%" y="271.50">automata::Backend::transformer::empty_transitions</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (474 samples, 31.45%)</title><rect x="30.3251%" y="245" width="31.4532%" height="15" fill="rgb(232,182,51)" fg:x="457" fg:w="474"/><text x="30.5751%" y="255.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push</text></g><g><title>alloc::raw_vec::finish_grow (415 samples, 27.54%)</title><rect x="34.2402%" y="229" width="27.5382%" height="15" fill="rgb(231,60,39)" fg:x="516" fg:w="415"/><text x="34.4902%" y="239.50">alloc::raw_vec::finish_grow</text></g><g><title>__rust_realloc (8 samples, 0.53%)</title><rect x="61.2475%" y="213" width="0.5309%" height="15" fill="rgb(208,69,12)" fg:x="923" fg:w="8"/><text x="61.4975%" y="223.50"></text></g><g><title>_int_free (19 samples, 1.26%)</title><rect x="69.0776%" y="245" width="1.2608%" height="15" fill="rgb(235,93,37)" fg:x="1041" fg:w="19"/><text x="69.3276%" y="255.50"></text></g><g><title>tcache_put (2 samples, 0.13%)</title><rect x="70.2057%" y="229" width="0.1327%" height="15" fill="rgb(213,116,39)" fg:x="1058" fg:w="2"/><text x="70.4557%" y="239.50"></text></g><g><title>__GI___libc_free (24 samples, 1.59%)</title><rect x="68.8786%" y="261" width="1.5926%" height="15" fill="rgb(222,207,29)" fg:x="1038" fg:w="24"/><text x="69.1286%" y="271.50"></text></g><g><title>arena_for_chunk (2 samples, 0.13%)</title><rect x="70.3384%" y="245" width="0.1327%" height="15" fill="rgb(206,96,30)" fg:x="1060" fg:w="2"/><text x="70.5884%" y="255.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.53%)</title><rect x="70.4711%" y="261" width="0.5309%" height="15" fill="rgb(218,138,4)" fg:x="1062" fg:w="8"/><text x="70.7211%" y="271.50"></text></g><g><title>tcache_get (3 samples, 0.20%)</title><rect x="70.8029%" y="245" width="0.1991%" height="15" fill="rgb(250,191,14)" fg:x="1067" fg:w="3"/><text x="71.0529%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned (5 samples, 0.33%)</title><rect x="71.0020%" y="261" width="0.3318%" height="15" fill="rgb(239,60,40)" fg:x="1070" fg:w="5"/><text x="71.2520%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.20%)</title><rect x="71.3338%" y="261" width="0.1991%" height="15" fill="rgb(206,27,48)" fg:x="1075" fg:w="3"/><text x="71.5838%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="71.5328%" y="261" width="0.0664%" height="15" fill="rgb(225,35,8)" fg:x="1078" fg:w="1"/><text x="71.7828%" y="271.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.13%)</title><rect x="71.5992%" y="261" width="0.1327%" height="15" fill="rgb(250,213,24)" fg:x="1079" fg:w="2"/><text x="71.8492%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.13%)</title><rect x="71.5992%" y="245" width="0.1327%" height="15" fill="rgb(247,123,22)" fg:x="1079" fg:w="2"/><text x="71.8492%" y="255.50"></text></g><g><title>__rust_alloc (2 samples, 0.13%)</title><rect x="71.7319%" y="261" width="0.1327%" height="15" fill="rgb(231,138,38)" fg:x="1081" fg:w="2"/><text x="71.9819%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (153 samples, 10.15%)</title><rect x="61.7784%" y="277" width="10.1526%" height="15" fill="rgb(231,145,46)" fg:x="931" fg:w="153"/><text x="62.0284%" y="287.50">&lt;core::iter::ad..</text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="71.8646%" y="261" width="0.0664%" height="15" fill="rgb(251,118,11)" fg:x="1083" fg:w="1"/><text x="72.1146%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.07%)</title><rect x="71.9310%" y="277" width="0.0664%" height="15" fill="rgb(217,147,25)" fg:x="1084" fg:w="1"/><text x="72.1810%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="71.9973%" y="277" width="0.0664%" height="15" fill="rgb(247,81,37)" fg:x="1085" fg:w="1"/><text x="72.2473%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.07%)</title><rect x="71.9973%" y="261" width="0.0664%" height="15" fill="rgb(209,12,38)" fg:x="1085" fg:w="1"/><text x="72.2473%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.07%)</title><rect x="73.3245%" y="213" width="0.0664%" height="15" fill="rgb(227,1,9)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="223.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.07%)</title><rect x="73.3245%" y="197" width="0.0664%" height="15" fill="rgb(248,47,43)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="207.50"></text></g><g><title>exc_page_fault (1 samples, 0.07%)</title><rect x="73.3245%" y="181" width="0.0664%" height="15" fill="rgb(221,10,30)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="191.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.07%)</title><rect x="73.3245%" y="165" width="0.0664%" height="15" fill="rgb(210,229,1)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="175.50"></text></g><g><title>handle_mm_fault (1 samples, 0.07%)</title><rect x="73.3245%" y="149" width="0.0664%" height="15" fill="rgb(222,148,37)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="159.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.07%)</title><rect x="73.3245%" y="133" width="0.0664%" height="15" fill="rgb(234,67,33)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="143.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.07%)</title><rect x="73.3245%" y="117" width="0.0664%" height="15" fill="rgb(247,98,35)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="127.50"></text></g><g><title>__folio_alloc (1 samples, 0.07%)</title><rect x="73.3245%" y="101" width="0.0664%" height="15" fill="rgb(247,138,52)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="111.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="73.3245%" y="85" width="0.0664%" height="15" fill="rgb(213,79,30)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="95.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="73.3245%" y="69" width="0.0664%" height="15" fill="rgb(246,177,23)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="79.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.07%)</title><rect x="73.3245%" y="53" width="0.0664%" height="15" fill="rgb(230,62,27)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="63.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.07%)</title><rect x="73.3245%" y="37" width="0.0664%" height="15" fill="rgb(216,154,8)" fg:x="1105" fg:w="1"/><text x="73.5745%" y="47.50"></text></g><g><title>_int_free (7 samples, 0.46%)</title><rect x="73.3908%" y="213" width="0.4645%" height="15" fill="rgb(244,35,45)" fg:x="1106" fg:w="7"/><text x="73.6408%" y="223.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.20%)</title><rect x="76.3769%" y="197" width="0.1991%" height="15" fill="rgb(251,115,12)" fg:x="1151" fg:w="3"/><text x="76.6269%" y="207.50"></text></g><g><title>exc_page_fault (2 samples, 0.13%)</title><rect x="76.4433%" y="181" width="0.1327%" height="15" fill="rgb(240,54,50)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="191.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.13%)</title><rect x="76.4433%" y="165" width="0.1327%" height="15" fill="rgb(233,84,52)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="175.50"></text></g><g><title>handle_mm_fault (2 samples, 0.13%)</title><rect x="76.4433%" y="149" width="0.1327%" height="15" fill="rgb(207,117,47)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="159.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.13%)</title><rect x="76.4433%" y="133" width="0.1327%" height="15" fill="rgb(249,43,39)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="143.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.13%)</title><rect x="76.4433%" y="117" width="0.1327%" height="15" fill="rgb(209,38,44)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="127.50"></text></g><g><title>__folio_alloc (2 samples, 0.13%)</title><rect x="76.4433%" y="101" width="0.1327%" height="15" fill="rgb(236,212,23)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="111.50"></text></g><g><title>__alloc_pages (2 samples, 0.13%)</title><rect x="76.4433%" y="85" width="0.1327%" height="15" fill="rgb(242,79,21)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="95.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.13%)</title><rect x="76.4433%" y="69" width="0.1327%" height="15" fill="rgb(211,96,35)" fg:x="1152" fg:w="2"/><text x="76.6933%" y="79.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.07%)</title><rect x="76.5096%" y="53" width="0.0664%" height="15" fill="rgb(253,215,40)" fg:x="1153" fg:w="1"/><text x="76.7596%" y="63.50"></text></g><g><title>malloc_consolidate (33 samples, 2.19%)</title><rect x="76.5760%" y="197" width="2.1898%" height="15" fill="rgb(211,81,21)" fg:x="1154" fg:w="33"/><text x="76.8260%" y="207.50">m..</text></g><g><title>_int_malloc (78 samples, 5.18%)</title><rect x="73.8553%" y="213" width="5.1758%" height="15" fill="rgb(208,190,38)" fg:x="1113" fg:w="78"/><text x="74.1053%" y="223.50">_int_m..</text></g><g><title>unlink_chunk (4 samples, 0.27%)</title><rect x="78.7658%" y="197" width="0.2654%" height="15" fill="rgb(235,213,38)" fg:x="1187" fg:w="4"/><text x="79.0158%" y="207.50"></text></g><g><title>_int_realloc (98 samples, 6.50%)</title><rect x="72.5946%" y="229" width="6.5030%" height="15" fill="rgb(237,122,38)" fg:x="1094" fg:w="98"/><text x="72.8446%" y="239.50">_int_real..</text></g><g><title>unlink_chunk (1 samples, 0.07%)</title><rect x="79.0312%" y="213" width="0.0664%" height="15" fill="rgb(244,218,35)" fg:x="1191" fg:w="1"/><text x="79.2812%" y="223.50"></text></g><g><title>__GI___libc_realloc (101 samples, 6.70%)</title><rect x="72.4618%" y="245" width="6.7021%" height="15" fill="rgb(240,68,47)" fg:x="1092" fg:w="101"/><text x="72.7118%" y="255.50">__GI___li..</text></g><g><title>checked_request2size (1 samples, 0.07%)</title><rect x="79.0975%" y="229" width="0.0664%" height="15" fill="rgb(210,16,53)" fg:x="1192" fg:w="1"/><text x="79.3475%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,185 samples, 78.63%)</title><rect x="0.7299%" y="293" width="78.6330%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1185"/><text x="0.9799%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (110 samples, 7.30%)</title><rect x="72.0637%" y="277" width="7.2993%" height="15" fill="rgb(224,169,11)" fg:x="1086" fg:w="110"/><text x="72.3137%" y="287.50">alloc::raw..</text></g><g><title>alloc::raw_vec::finish_grow (106 samples, 7.03%)</title><rect x="72.3291%" y="261" width="7.0338%" height="15" fill="rgb(250,166,2)" fg:x="1090" fg:w="106"/><text x="72.5791%" y="271.50">alloc::ra..</text></g><g><title>__rdl_realloc (3 samples, 0.20%)</title><rect x="79.1639%" y="245" width="0.1991%" height="15" fill="rgb(242,216,29)" fg:x="1193" fg:w="3"/><text x="79.4139%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.13%)</title><rect x="79.2303%" y="229" width="0.1327%" height="15" fill="rgb(230,116,27)" fg:x="1194" fg:w="2"/><text x="79.4803%" y="239.50"></text></g><g><title>systrim (1 samples, 0.07%)</title><rect x="79.6948%" y="261" width="0.0664%" height="15" fill="rgb(228,99,48)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="271.50"></text></g><g><title>__glibc_morecore (1 samples, 0.07%)</title><rect x="79.6948%" y="245" width="0.0664%" height="15" fill="rgb(253,11,6)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="255.50"></text></g><g><title>__GI___sbrk (1 samples, 0.07%)</title><rect x="79.6948%" y="229" width="0.0664%" height="15" fill="rgb(247,143,39)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="239.50"></text></g><g><title>__brk (1 samples, 0.07%)</title><rect x="79.6948%" y="213" width="0.0664%" height="15" fill="rgb(236,97,10)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="79.6948%" y="197" width="0.0664%" height="15" fill="rgb(233,208,19)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="207.50"></text></g><g><title>do_syscall_64 (1 samples, 0.07%)</title><rect x="79.6948%" y="181" width="0.0664%" height="15" fill="rgb(216,164,2)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="191.50"></text></g><g><title>__do_sys_brk (1 samples, 0.07%)</title><rect x="79.6948%" y="165" width="0.0664%" height="15" fill="rgb(220,129,5)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="175.50"></text></g><g><title>do_mas_align_munmap (1 samples, 0.07%)</title><rect x="79.6948%" y="149" width="0.0664%" height="15" fill="rgb(242,17,10)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="159.50"></text></g><g><title>__split_vma (1 samples, 0.07%)</title><rect x="79.6948%" y="133" width="0.0664%" height="15" fill="rgb(242,107,0)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="143.50"></text></g><g><title>__vma_adjust (1 samples, 0.07%)</title><rect x="79.6948%" y="117" width="0.0664%" height="15" fill="rgb(251,28,31)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="127.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.07%)</title><rect x="79.6948%" y="101" width="0.0664%" height="15" fill="rgb(233,223,10)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="111.50"></text></g><g><title>mas_wr_modify (1 samples, 0.07%)</title><rect x="79.6948%" y="85" width="0.0664%" height="15" fill="rgb(215,21,27)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="95.50"></text></g><g><title>mas_wr_node_store (1 samples, 0.07%)</title><rect x="79.6948%" y="69" width="0.0664%" height="15" fill="rgb(232,23,21)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="79.50"></text></g><g><title>call_rcu (1 samples, 0.07%)</title><rect x="79.6948%" y="53" width="0.0664%" height="15" fill="rgb(244,5,23)" fg:x="1201" fg:w="1"/><text x="79.9448%" y="63.50"></text></g><g><title>__GI___libc_free (10 samples, 0.66%)</title><rect x="79.3630%" y="293" width="0.6636%" height="15" fill="rgb(226,81,46)" fg:x="1196" fg:w="10"/><text x="79.6130%" y="303.50"></text></g><g><title>_int_free (10 samples, 0.66%)</title><rect x="79.3630%" y="277" width="0.6636%" height="15" fill="rgb(247,70,30)" fg:x="1196" fg:w="10"/><text x="79.6130%" y="287.50"></text></g><g><title>unlink_chunk (4 samples, 0.27%)</title><rect x="79.7611%" y="261" width="0.2654%" height="15" fill="rgb(212,68,19)" fg:x="1202" fg:w="4"/><text x="80.0111%" y="271.50"></text></g><g><title>__cgroup_throttle_swaprate (2 samples, 0.13%)</title><rect x="80.6238%" y="181" width="0.1327%" height="15" fill="rgb(240,187,13)" fg:x="1215" fg:w="2"/><text x="80.8738%" y="191.50"></text></g><g><title>blk_cgroup_congested (2 samples, 0.13%)</title><rect x="80.6238%" y="165" width="0.1327%" height="15" fill="rgb(223,113,26)" fg:x="1215" fg:w="2"/><text x="80.8738%" y="175.50"></text></g><g><title>kthread_blkcg (1 samples, 0.07%)</title><rect x="80.6901%" y="149" width="0.0664%" height="15" fill="rgb(206,192,2)" fg:x="1216" fg:w="1"/><text x="80.9401%" y="159.50"></text></g><g><title>folio_add_lru (1 samples, 0.07%)</title><rect x="80.7565%" y="181" width="0.0664%" height="15" fill="rgb(241,108,4)" fg:x="1217" fg:w="1"/><text x="81.0065%" y="191.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.07%)</title><rect x="80.7565%" y="165" width="0.0664%" height="15" fill="rgb(247,173,49)" fg:x="1217" fg:w="1"/><text x="81.0065%" y="175.50"></text></g><g><title>lru_add_fn (1 samples, 0.07%)</title><rect x="80.7565%" y="149" width="0.0664%" height="15" fill="rgb(224,114,35)" fg:x="1217" fg:w="1"/><text x="81.0065%" y="159.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="80.7565%" y="133" width="0.0664%" height="15" fill="rgb(245,159,27)" fg:x="1217" fg:w="1"/><text x="81.0065%" y="143.50"></text></g><g><title>check_preemption_disabled (1 samples, 0.07%)</title><rect x="80.7565%" y="117" width="0.0664%" height="15" fill="rgb(245,172,44)" fg:x="1217" fg:w="1"/><text x="81.0065%" y="127.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.07%)</title><rect x="80.8228%" y="181" width="0.0664%" height="15" fill="rgb(236,23,11)" fg:x="1218" fg:w="1"/><text x="81.0728%" y="191.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.07%)</title><rect x="80.8228%" y="165" width="0.0664%" height="15" fill="rgb(205,117,38)" fg:x="1218" fg:w="1"/><text x="81.0728%" y="175.50"></text></g><g><title>handle_mm_fault (6 samples, 0.40%)</title><rect x="80.5574%" y="213" width="0.3981%" height="15" fill="rgb(237,72,25)" fg:x="1214" fg:w="6"/><text x="80.8074%" y="223.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.40%)</title><rect x="80.5574%" y="197" width="0.3981%" height="15" fill="rgb(244,70,9)" fg:x="1214" fg:w="6"/><text x="80.8074%" y="207.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.07%)</title><rect x="80.8892%" y="181" width="0.0664%" height="15" fill="rgb(217,125,39)" fg:x="1219" fg:w="1"/><text x="81.1392%" y="191.50"></text></g><g><title>__folio_alloc (1 samples, 0.07%)</title><rect x="80.8892%" y="165" width="0.0664%" height="15" fill="rgb(235,36,10)" fg:x="1219" fg:w="1"/><text x="81.1392%" y="175.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="80.8892%" y="149" width="0.0664%" height="15" fill="rgb(251,123,47)" fg:x="1219" fg:w="1"/><text x="81.1392%" y="159.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="80.8892%" y="133" width="0.0664%" height="15" fill="rgb(221,13,13)" fg:x="1219" fg:w="1"/><text x="81.1392%" y="143.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.07%)</title><rect x="80.8892%" y="117" width="0.0664%" height="15" fill="rgb(238,131,9)" fg:x="1219" fg:w="1"/><text x="81.1392%" y="127.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.07%)</title><rect x="80.8892%" y="101" width="0.0664%" height="15" fill="rgb(211,50,8)" fg:x="1219" fg:w="1"/><text x="81.1392%" y="111.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.53%)</title><rect x="80.4910%" y="261" width="0.5309%" height="15" fill="rgb(245,182,24)" fg:x="1213" fg:w="8"/><text x="80.7410%" y="271.50"></text></g><g><title>exc_page_fault (7 samples, 0.46%)</title><rect x="80.5574%" y="245" width="0.4645%" height="15" fill="rgb(242,14,37)" fg:x="1214" fg:w="7"/><text x="80.8074%" y="255.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.46%)</title><rect x="80.5574%" y="229" width="0.4645%" height="15" fill="rgb(246,228,12)" fg:x="1214" fg:w="7"/><text x="80.8074%" y="239.50"></text></g><g><title>lock_mm_and_find_vma (1 samples, 0.07%)</title><rect x="80.9555%" y="213" width="0.0664%" height="15" fill="rgb(213,55,15)" fg:x="1220" fg:w="1"/><text x="81.2055%" y="223.50"></text></g><g><title>find_vma (1 samples, 0.07%)</title><rect x="80.9555%" y="197" width="0.0664%" height="15" fill="rgb(209,9,3)" fg:x="1220" fg:w="1"/><text x="81.2055%" y="207.50"></text></g><g><title>mt_find (1 samples, 0.07%)</title><rect x="80.9555%" y="181" width="0.0664%" height="15" fill="rgb(230,59,30)" fg:x="1220" fg:w="1"/><text x="81.2055%" y="191.50"></text></g><g><title>mtree_range_walk (1 samples, 0.07%)</title><rect x="80.9555%" y="165" width="0.0664%" height="15" fill="rgb(209,121,21)" fg:x="1220" fg:w="1"/><text x="81.2055%" y="175.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="81.0219%" y="261" width="0.0664%" height="15" fill="rgb(220,109,13)" fg:x="1221" fg:w="1"/><text x="81.2719%" y="271.50"></text></g><g><title>malloc_consolidate (6 samples, 0.40%)</title><rect x="81.0883%" y="261" width="0.3981%" height="15" fill="rgb(232,18,1)" fg:x="1222" fg:w="6"/><text x="81.3383%" y="271.50"></text></g><g><title>__GI___libc_malloc (23 samples, 1.53%)</title><rect x="80.0265%" y="293" width="1.5262%" height="15" fill="rgb(215,41,42)" fg:x="1206" fg:w="23"/><text x="80.2765%" y="303.50"></text></g><g><title>_int_malloc (23 samples, 1.53%)</title><rect x="80.0265%" y="277" width="1.5262%" height="15" fill="rgb(224,123,36)" fg:x="1206" fg:w="23"/><text x="80.2765%" y="287.50"></text></g><g><title>sysmalloc (1 samples, 0.07%)</title><rect x="81.4864%" y="261" width="0.0664%" height="15" fill="rgb(240,125,3)" fg:x="1228" fg:w="1"/><text x="81.7364%" y="271.50"></text></g><g><title>__glibc_morecore (1 samples, 0.07%)</title><rect x="81.4864%" y="245" width="0.0664%" height="15" fill="rgb(205,98,50)" fg:x="1228" fg:w="1"/><text x="81.7364%" y="255.50"></text></g><g><title>__GI___sbrk (1 samples, 0.07%)</title><rect x="81.4864%" y="229" width="0.0664%" height="15" fill="rgb(205,185,37)" fg:x="1228" fg:w="1"/><text x="81.7364%" y="239.50"></text></g><g><title>__brk (1 samples, 0.07%)</title><rect x="81.4864%" y="213" width="0.0664%" height="15" fill="rgb(238,207,15)" fg:x="1228" fg:w="1"/><text x="81.7364%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="81.4864%" y="197" width="0.0664%" height="15" fill="rgb(213,199,42)" fg:x="1228" fg:w="1"/><text x="81.7364%" y="207.50"></text></g><g><title>do_syscall_64 (1 samples, 0.07%)</title><rect x="81.4864%" y="181" width="0.0664%" height="15" fill="rgb(235,201,11)" fg:x="1228" fg:w="1"/><text x="81.7364%" y="191.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.07%)</title><rect x="81.4864%" y="165" width="0.0664%" height="15" fill="rgb(207,46,11)" fg:x="1228" fg:w="1"/><text x="81.7364%" y="175.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.27%)</title><rect x="81.5528%" y="293" width="0.2654%" height="15" fill="rgb(241,35,35)" fg:x="1229" fg:w="4"/><text x="81.8028%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.07%)</title><rect x="81.8182%" y="293" width="0.0664%" height="15" fill="rgb(243,32,47)" fg:x="1233" fg:w="1"/><text x="82.0682%" y="303.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.07%)</title><rect x="82.0836%" y="197" width="0.0664%" height="15" fill="rgb(247,202,23)" fg:x="1237" fg:w="1"/><text x="82.3336%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.33%)</title><rect x="81.8845%" y="293" width="0.3318%" height="15" fill="rgb(219,102,11)" fg:x="1234" fg:w="5"/><text x="82.1345%" y="303.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.20%)</title><rect x="82.0173%" y="277" width="0.1991%" height="15" fill="rgb(243,110,44)" fg:x="1236" fg:w="3"/><text x="82.2673%" y="287.50"></text></g><g><title>exc_page_fault (2 samples, 0.13%)</title><rect x="82.0836%" y="261" width="0.1327%" height="15" fill="rgb(222,74,54)" fg:x="1237" fg:w="2"/><text x="82.3336%" y="271.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.13%)</title><rect x="82.0836%" y="245" width="0.1327%" height="15" fill="rgb(216,99,12)" fg:x="1237" fg:w="2"/><text x="82.3336%" y="255.50"></text></g><g><title>handle_mm_fault (2 samples, 0.13%)</title><rect x="82.0836%" y="229" width="0.1327%" height="15" fill="rgb(226,22,26)" fg:x="1237" fg:w="2"/><text x="82.3336%" y="239.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.13%)</title><rect x="82.0836%" y="213" width="0.1327%" height="15" fill="rgb(217,163,10)" fg:x="1237" fg:w="2"/><text x="82.3336%" y="223.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.07%)</title><rect x="82.1500%" y="197" width="0.0664%" height="15" fill="rgb(213,25,53)" fg:x="1238" fg:w="1"/><text x="82.4000%" y="207.50"></text></g><g><title>__folio_alloc (1 samples, 0.07%)</title><rect x="82.1500%" y="181" width="0.0664%" height="15" fill="rgb(252,105,26)" fg:x="1238" fg:w="1"/><text x="82.4000%" y="191.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="82.1500%" y="165" width="0.0664%" height="15" fill="rgb(220,39,43)" fg:x="1238" fg:w="1"/><text x="82.4000%" y="175.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="82.1500%" y="149" width="0.0664%" height="15" fill="rgb(229,68,48)" fg:x="1238" fg:w="1"/><text x="82.4000%" y="159.50"></text></g><g><title>clear_page_rep (1 samples, 0.07%)</title><rect x="82.1500%" y="133" width="0.0664%" height="15" fill="rgb(252,8,32)" fg:x="1238" fg:w="1"/><text x="82.4000%" y="143.50"></text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="82.2163%" y="293" width="0.0664%" height="15" fill="rgb(223,20,43)" fg:x="1239" fg:w="1"/><text x="82.4663%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 2.85%)</title><rect x="83.0126%" y="277" width="2.8534%" height="15" fill="rgb(229,81,49)" fg:x="1251" fg:w="43"/><text x="83.2626%" y="287.50">&lt;s..</text></g><g><title>__GI___libc_free (3 samples, 0.20%)</title><rect x="85.8660%" y="277" width="0.1991%" height="15" fill="rgb(236,28,36)" fg:x="1294" fg:w="3"/><text x="86.1160%" y="287.50"></text></g><g><title>_int_free (3 samples, 0.20%)</title><rect x="85.8660%" y="261" width="0.1991%" height="15" fill="rgb(249,185,26)" fg:x="1294" fg:w="3"/><text x="86.1160%" y="271.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.07%)</title><rect x="86.0650%" y="277" width="0.0664%" height="15" fill="rgb(249,174,33)" fg:x="1297" fg:w="1"/><text x="86.3150%" y="287.50"></text></g><g><title>__GI___libc_free (1 samples, 0.07%)</title><rect x="94.2269%" y="261" width="0.0664%" height="15" fill="rgb(233,201,37)" fg:x="1420" fg:w="1"/><text x="94.4769%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.07%)</title><rect x="94.2269%" y="245" width="0.0664%" height="15" fill="rgb(221,78,26)" fg:x="1420" fg:w="1"/><text x="94.4769%" y="255.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.13%)</title><rect x="94.2933%" y="261" width="0.1327%" height="15" fill="rgb(250,127,30)" fg:x="1421" fg:w="2"/><text x="94.5433%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.07%)</title><rect x="94.3597%" y="245" width="0.0664%" height="15" fill="rgb(230,49,44)" fg:x="1422" fg:w="1"/><text x="94.6097%" y="255.50"></text></g><g><title>unlink_chunk (1 samples, 0.07%)</title><rect x="94.3597%" y="229" width="0.0664%" height="15" fill="rgb(229,67,23)" fg:x="1422" fg:w="1"/><text x="94.6097%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned (2 samples, 0.13%)</title><rect x="94.4260%" y="261" width="0.1327%" height="15" fill="rgb(249,83,47)" fg:x="1423" fg:w="2"/><text x="94.6760%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (24 samples, 1.59%)</title><rect x="94.5587%" y="261" width="1.5926%" height="15" fill="rgb(215,43,3)" fg:x="1425" fg:w="24"/><text x="94.8087%" y="271.50"></text></g><g><title>automata::Backend::transformer::ComplexState::new (249 samples, 16.52%)</title><rect x="82.2827%" y="293" width="16.5229%" height="15" fill="rgb(238,154,13)" fg:x="1240" fg:w="249"/><text x="82.5327%" y="303.50">automata::Backend::transfo..</text></g><g><title>core::slice::sort::merge_sort (191 samples, 12.67%)</title><rect x="86.1314%" y="277" width="12.6742%" height="15" fill="rgb(219,56,2)" fg:x="1298" fg:w="191"/><text x="86.3814%" y="287.50">core::slice::sort::..</text></g><g><title>core::slice::sort::insertion_sort_shift_left (40 samples, 2.65%)</title><rect x="96.1513%" y="261" width="2.6543%" height="15" fill="rgb(233,0,4)" fg:x="1449" fg:w="40"/><text x="96.4013%" y="271.50">co..</text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.33%)</title><rect x="98.8056%" y="293" width="0.3318%" height="15" fill="rgb(235,30,7)" fg:x="1489" fg:w="5"/><text x="99.0556%" y="303.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.07%)</title><rect x="99.1374%" y="261" width="0.0664%" height="15" fill="rgb(250,79,13)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="271.50"></text></g><g><title>exc_page_fault (1 samples, 0.07%)</title><rect x="99.1374%" y="245" width="0.0664%" height="15" fill="rgb(211,146,34)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="255.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.07%)</title><rect x="99.1374%" y="229" width="0.0664%" height="15" fill="rgb(228,22,38)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.07%)</title><rect x="99.1374%" y="213" width="0.0664%" height="15" fill="rgb(235,168,5)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="223.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.07%)</title><rect x="99.1374%" y="197" width="0.0664%" height="15" fill="rgb(221,155,16)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="207.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.07%)</title><rect x="99.1374%" y="181" width="0.0664%" height="15" fill="rgb(215,215,53)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="191.50"></text></g><g><title>__folio_alloc (1 samples, 0.07%)</title><rect x="99.1374%" y="165" width="0.0664%" height="15" fill="rgb(223,4,10)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="175.50"></text></g><g><title>__alloc_pages (1 samples, 0.07%)</title><rect x="99.1374%" y="149" width="0.0664%" height="15" fill="rgb(234,103,6)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="159.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="99.1374%" y="133" width="0.0664%" height="15" fill="rgb(227,97,0)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="143.50"></text></g><g><title>clear_page_rep (1 samples, 0.07%)</title><rect x="99.1374%" y="117" width="0.0664%" height="15" fill="rgb(234,150,53)" fg:x="1494" fg:w="1"/><text x="99.3874%" y="127.50"></text></g><g><title>_start (1,495 samples, 99.20%)</title><rect x="0.0664%" y="565" width="99.2037%" height="15" fill="rgb(228,201,54)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="575.50">_start</text></g><g><title>__libc_start_main_impl (1,495 samples, 99.20%)</title><rect x="0.0664%" y="549" width="99.2037%" height="15" fill="rgb(222,22,37)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="559.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,495 samples, 99.20%)</title><rect x="0.0664%" y="533" width="99.2037%" height="15" fill="rgb(237,53,32)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="543.50">__libc_start_call_main</text></g><g><title>main (1,495 samples, 99.20%)</title><rect x="0.0664%" y="517" width="99.2037%" height="15" fill="rgb(233,25,53)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,495 samples, 99.20%)</title><rect x="0.0664%" y="501" width="99.2037%" height="15" fill="rgb(210,40,34)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,495 samples, 99.20%)</title><rect x="0.0664%" y="485" width="99.2037%" height="15" fill="rgb(241,220,44)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,495 samples, 99.20%)</title><rect x="0.0664%" y="469" width="99.2037%" height="15" fill="rgb(235,28,35)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,495 samples, 99.20%)</title><rect x="0.0664%" y="453" width="99.2037%" height="15" fill="rgb(210,56,17)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,495 samples, 99.20%)</title><rect x="0.0664%" y="437" width="99.2037%" height="15" fill="rgb(224,130,29)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,495 samples, 99.20%)</title><rect x="0.0664%" y="421" width="99.2037%" height="15" fill="rgb(235,212,8)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,495 samples, 99.20%)</title><rect x="0.0664%" y="405" width="99.2037%" height="15" fill="rgb(223,33,50)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,495 samples, 99.20%)</title><rect x="0.0664%" y="389" width="99.2037%" height="15" fill="rgb(219,149,13)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,495 samples, 99.20%)</title><rect x="0.0664%" y="373" width="99.2037%" height="15" fill="rgb(250,156,29)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,495 samples, 99.20%)</title><rect x="0.0664%" y="357" width="99.2037%" height="15" fill="rgb(216,193,19)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,495 samples, 99.20%)</title><rect x="0.0664%" y="341" width="99.2037%" height="15" fill="rgb(216,135,14)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>automata::main (1,495 samples, 99.20%)</title><rect x="0.0664%" y="325" width="99.2037%" height="15" fill="rgb(241,47,5)" fg:x="1" fg:w="1495"/><text x="0.3164%" y="335.50">automata::main</text></g><g><title>automata::Backend::transformer::nfa_to_dfa (1,494 samples, 99.14%)</title><rect x="0.1327%" y="309" width="99.1374%" height="15" fill="rgb(233,42,35)" fg:x="2" fg:w="1494"/><text x="0.3827%" y="319.50">automata::Backend::transformer::nfa_to_dfa</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.13%)</title><rect x="99.1374%" y="293" width="0.1327%" height="15" fill="rgb(231,13,6)" fg:x="1494" fg:w="2"/><text x="99.3874%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.13%)</title><rect x="99.1374%" y="277" width="0.1327%" height="15" fill="rgb(207,181,40)" fg:x="1494" fg:w="2"/><text x="99.3874%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.07%)</title><rect x="99.2037%" y="261" width="0.0664%" height="15" fill="rgb(254,173,49)" fg:x="1495" fg:w="1"/><text x="99.4537%" y="271.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.07%)</title><rect x="99.2701%" y="533" width="0.0664%" height="15" fill="rgb(221,1,38)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="543.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.07%)</title><rect x="99.2701%" y="517" width="0.0664%" height="15" fill="rgb(206,124,46)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="527.50"></text></g><g><title>bprm_execve (1 samples, 0.07%)</title><rect x="99.2701%" y="501" width="0.0664%" height="15" fill="rgb(249,21,11)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="511.50"></text></g><g><title>load_elf_binary (1 samples, 0.07%)</title><rect x="99.2701%" y="485" width="0.0664%" height="15" fill="rgb(222,201,40)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="495.50"></text></g><g><title>padzero (1 samples, 0.07%)</title><rect x="99.2701%" y="469" width="0.0664%" height="15" fill="rgb(235,61,29)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="479.50"></text></g><g><title>clear_user_rep_good (1 samples, 0.07%)</title><rect x="99.2701%" y="453" width="0.0664%" height="15" fill="rgb(219,207,3)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="463.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.07%)</title><rect x="99.2701%" y="437" width="0.0664%" height="15" fill="rgb(222,56,46)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="447.50"></text></g><g><title>exc_page_fault (1 samples, 0.07%)</title><rect x="99.2701%" y="421" width="0.0664%" height="15" fill="rgb(239,76,54)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="431.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.07%)</title><rect x="99.2701%" y="405" width="0.0664%" height="15" fill="rgb(231,124,27)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="415.50"></text></g><g><title>handle_mm_fault (1 samples, 0.07%)</title><rect x="99.2701%" y="389" width="0.0664%" height="15" fill="rgb(249,195,6)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="399.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.07%)</title><rect x="99.2701%" y="373" width="0.0664%" height="15" fill="rgb(237,174,47)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="383.50"></text></g><g><title>__pmd_alloc (1 samples, 0.07%)</title><rect x="99.2701%" y="357" width="0.0664%" height="15" fill="rgb(206,201,31)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="367.50"></text></g><g><title>alloc_pages (1 samples, 0.07%)</title><rect x="99.2701%" y="341" width="0.0664%" height="15" fill="rgb(231,57,52)" fg:x="1496" fg:w="1"/><text x="99.5201%" y="351.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.07%)</title><rect x="99.3364%" y="453" width="0.0664%" height="15" fill="rgb(248,177,22)" fg:x="1497" fg:w="1"/><text x="99.5864%" y="463.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.07%)</title><rect x="99.3364%" y="437" width="0.0664%" height="15" fill="rgb(215,211,37)" fg:x="1497" fg:w="1"/><text x="99.5864%" y="447.50"></text></g><g><title>release_pages (1 samples, 0.07%)</title><rect x="99.3364%" y="421" width="0.0664%" height="15" fill="rgb(241,128,51)" fg:x="1497" fg:w="1"/><text x="99.5864%" y="431.50"></text></g><g><title>free_unref_page_list (1 samples, 0.07%)</title><rect x="99.3364%" y="405" width="0.0664%" height="15" fill="rgb(227,165,31)" fg:x="1497" fg:w="1"/><text x="99.5864%" y="415.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.07%)</title><rect x="99.3364%" y="389" width="0.0664%" height="15" fill="rgb(228,167,24)" fg:x="1497" fg:w="1"/><text x="99.5864%" y="399.50"></text></g><g><title>__free_one_page (1 samples, 0.07%)</title><rect x="99.3364%" y="373" width="0.0664%" height="15" fill="rgb(228,143,12)" fg:x="1497" fg:w="1"/><text x="99.5864%" y="383.50"></text></g><g><title>tlb_batch_pages_flush (2 samples, 0.13%)</title><rect x="99.4028%" y="421" width="0.1327%" height="15" fill="rgb(249,149,8)" fg:x="1498" fg:w="2"/><text x="99.6528%" y="431.50"></text></g><g><title>release_pages (2 samples, 0.13%)</title><rect x="99.4028%" y="405" width="0.1327%" height="15" fill="rgb(243,35,44)" fg:x="1498" fg:w="2"/><text x="99.6528%" y="415.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.07%)</title><rect x="99.4691%" y="389" width="0.0664%" height="15" fill="rgb(246,89,9)" fg:x="1499" fg:w="1"/><text x="99.7191%" y="399.50"></text></g><g><title>check_preemption_disabled (1 samples, 0.07%)</title><rect x="99.4691%" y="373" width="0.0664%" height="15" fill="rgb(233,213,13)" fg:x="1499" fg:w="1"/><text x="99.7191%" y="383.50"></text></g><g><title>automata (1,501 samples, 99.60%)</title><rect x="0.0000%" y="581" width="99.6019%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="1501"/><text x="0.2500%" y="591.50">automata</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.33%)</title><rect x="99.2701%" y="565" width="0.3318%" height="15" fill="rgb(239,167,4)" fg:x="1496" fg:w="5"/><text x="99.5201%" y="575.50"></text></g><g><title>do_syscall_64 (5 samples, 0.33%)</title><rect x="99.2701%" y="549" width="0.3318%" height="15" fill="rgb(209,217,16)" fg:x="1496" fg:w="5"/><text x="99.5201%" y="559.50"></text></g><g><title>__x64_sys_exit_group (4 samples, 0.27%)</title><rect x="99.3364%" y="533" width="0.2654%" height="15" fill="rgb(219,88,35)" fg:x="1497" fg:w="4"/><text x="99.5864%" y="543.50"></text></g><g><title>do_group_exit (4 samples, 0.27%)</title><rect x="99.3364%" y="517" width="0.2654%" height="15" fill="rgb(220,193,23)" fg:x="1497" fg:w="4"/><text x="99.5864%" y="527.50"></text></g><g><title>do_exit (4 samples, 0.27%)</title><rect x="99.3364%" y="501" width="0.2654%" height="15" fill="rgb(230,90,52)" fg:x="1497" fg:w="4"/><text x="99.5864%" y="511.50"></text></g><g><title>__mmput (4 samples, 0.27%)</title><rect x="99.3364%" y="485" width="0.2654%" height="15" fill="rgb(252,106,19)" fg:x="1497" fg:w="4"/><text x="99.5864%" y="495.50"></text></g><g><title>exit_mmap (4 samples, 0.27%)</title><rect x="99.3364%" y="469" width="0.2654%" height="15" fill="rgb(206,74,20)" fg:x="1497" fg:w="4"/><text x="99.5864%" y="479.50"></text></g><g><title>unmap_vmas (3 samples, 0.20%)</title><rect x="99.4028%" y="453" width="0.1991%" height="15" fill="rgb(230,138,44)" fg:x="1498" fg:w="3"/><text x="99.6528%" y="463.50"></text></g><g><title>unmap_page_range (3 samples, 0.20%)</title><rect x="99.4028%" y="437" width="0.1991%" height="15" fill="rgb(235,182,43)" fg:x="1498" fg:w="3"/><text x="99.6528%" y="447.50"></text></g><g><title>vm_normal_page (1 samples, 0.07%)</title><rect x="99.5355%" y="421" width="0.0664%" height="15" fill="rgb(242,16,51)" fg:x="1500" fg:w="1"/><text x="99.7855%" y="431.50"></text></g><g><title>all (1,507 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="1507"/><text x="0.2500%" y="607.50"></text></g><g><title>perf-exec (6 samples, 0.40%)</title><rect x="99.6019%" y="581" width="0.3981%" height="15" fill="rgb(210,31,22)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.40%)</title><rect x="99.6019%" y="565" width="0.3981%" height="15" fill="rgb(239,54,39)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="575.50"></text></g><g><title>do_syscall_64 (6 samples, 0.40%)</title><rect x="99.6019%" y="549" width="0.3981%" height="15" fill="rgb(230,99,41)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="559.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.40%)</title><rect x="99.6019%" y="533" width="0.3981%" height="15" fill="rgb(253,106,12)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="543.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.40%)</title><rect x="99.6019%" y="517" width="0.3981%" height="15" fill="rgb(213,46,41)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="527.50"></text></g><g><title>bprm_execve (6 samples, 0.40%)</title><rect x="99.6019%" y="501" width="0.3981%" height="15" fill="rgb(215,133,35)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="511.50"></text></g><g><title>load_elf_binary (6 samples, 0.40%)</title><rect x="99.6019%" y="485" width="0.3981%" height="15" fill="rgb(213,28,5)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="495.50"></text></g><g><title>begin_new_exec (6 samples, 0.40%)</title><rect x="99.6019%" y="469" width="0.3981%" height="15" fill="rgb(215,77,49)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="479.50"></text></g><g><title>perf_event_exec (6 samples, 0.40%)</title><rect x="99.6019%" y="453" width="0.3981%" height="15" fill="rgb(248,100,22)" fg:x="1501" fg:w="6"/><text x="99.8519%" y="463.50"></text></g></svg></svg>